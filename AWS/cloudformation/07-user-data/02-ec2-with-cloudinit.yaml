Parameters:
  #Dropbox example, retrieve KeyPair from your AWS account
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair


Resources:
  MyDockerServerHost:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple PHP application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              docker: []
              php: []
          groups:
            devops: {}
          users: {}
          sources:
            "/home/ec2-user/aws-cli": "https://github.com/aws/aws-cli/tarball/master"
          files:
            "/home/ec2-user/test-file.txt":
              content: |
                "Do you come from a land down under?
                Where women glow and men plunder?
                Can't you hear, can't you hear the thunder?
                You better run, you better take cover."
              mode: '000400'
              owner: ec2-user
              group: ec2-user
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            
          commands:
            test:
              command: "echo \"$MAGIC\" > /opt/hello-test.txt"
              env:
                MAGIC: "Hello example from the environment!"
              cwd: "~"
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enable: 'true'
                ensureRunning: 'true'
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    
    Properties:
      AvailabilityZone: eu-west-1a
      ImageId: ami-01cae1550c0adea9c #AWS AMI
      #ImageId: ami-01cae1550c0adea9c ami-096800910c1b781ba #Ubuntu
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SSHSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y
            #yum install -y pip

            # Get the latest CloudFormation helper scripts
            yum install -y aws-cfn-bootstrap
            
            # Start cfn-init
            echo /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyDockerServerHost --region ${AWS::Region} >> /opt/out.txt
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyDockerServerHost --region ${AWS::Region}
            
            # cfn-init completed so signal success or not
            echo /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MyDockerServerHost --region ${AWS::Region} >> /opt/out.txt
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MyDockerServerHost --region ${AWS::Region}
        
      Tags:
      - Key: Name
        Value: "eyal-ecs-with-userdata-05"


  # an elastic IP for our instance
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyDockerServerHost

  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
